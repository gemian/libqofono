Index: libqofono-ubuntu/src/dbus/ofono_connection_manager.xml
===================================================================
--- libqofono-ubuntu.orig/src/dbus/ofono_connection_manager.xml
+++ libqofono-ubuntu/src/dbus/ofono_connection_manager.xml
@@ -18,6 +18,7 @@
 			<arg type="o" direction="in"/>
 		</method>
 		<method name="DeactivateAll"/>
+                <method name="ResetContexts"/>
 		<method name="GetContexts">
 			<arg type="a(oa{sv})" direction="out"/>
 			<annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="ObjectPathPropertiesList"/>
Index: libqofono-ubuntu/src/qofonoconnectionmanager.cpp
===================================================================
--- libqofono-ubuntu.orig/src/qofonoconnectionmanager.cpp
+++ libqofono-ubuntu/src/qofonoconnectionmanager.cpp
@@ -143,6 +143,21 @@ void QOfonoConnectionManager::removeCont
     }
 }
 
+void QOfonoConnectionManager::resetContexts()
+{
+    OfonoConnectionManager *iface = (OfonoConnectionManager*)dbusInterface();
+    if (iface) {
+        QDBusPendingReply<> deactivate = iface->DeactivateAll();
+        deactivate.waitForFinished();
+        QDBusPendingReply<> reset = iface->ResetContexts();
+        reset.waitForFinished();
+        if (reset.isError()) {
+            qDebug() << reset.error();
+            Q_EMIT reportError(reset.error().message());
+        }
+    }
+}
+
 bool QOfonoConnectionManager::attached() const
 {
     return getBool("Attached");
Index: libqofono-ubuntu/src/qofonoconnectionmanager.h
===================================================================
--- libqofono-ubuntu.orig/src/qofonoconnectionmanager.h
+++ libqofono-ubuntu/src/qofonoconnectionmanager.h
@@ -79,6 +79,7 @@ public slots:
     void deactivateAll();
     void addContext(const QString &type);
     void removeContext(const QString &path);
+    void resetContexts();
 
 private slots:
     void onAddContextFinished(QDBusPendingCallWatcher *watch);
Index: libqofono-ubuntu/test/auto/tests/tst_qofonoconnman.cpp
===================================================================
--- libqofono-ubuntu.orig/test/auto/tests/tst_qofonoconnman.cpp
+++ libqofono-ubuntu/test/auto/tests/tst_qofonoconnman.cpp
@@ -107,8 +107,45 @@ private slots:
         QCOMPARE(rem.count(), 0);
     }
 
+    void testResetContexts()
+    {
+        Q_FOREACH (QString context, m->contexts()) {
+            m->removeContext(context);
+        }
+        QTRY_VERIFY(m->contexts().isEmpty());
+
+        QSignalSpy pow(m, SIGNAL(poweredChanged(bool)));
+        QSignalSpy add(m, SIGNAL(contextAdded(QString)));
+        QSignalSpy rem(m, SIGNAL(contextRemoved(QString)));
+
+        // Add new context.
+        m->addContext(QString("internet"));
+        QTRY_COMPARE(add.count(), 1);
+        QString path = add.takeFirst().at(0).toString();
+        QOfonoConnectionContext* contextInternet = new QOfonoConnectionContext(this);
+        contextInternet->setContextPath(path);
+
+        // We activate context to make sure connman is deactivating on reset.
+        contextInternet->setActive(true);
+        QTRY_VERIFY(contextInternet->active());
+
+        // Connman needs to be powered down before calling reset.
+        m->setPowered(false);
+        QTRY_COMPARE(pow.count(), 1);
+        QCOMPARE(pow.takeFirst().at(0).toBool(), false);
+        QCOMPARE(m->powered(), false);
+
+        m->resetContexts();
+        QTRY_COMPARE(rem.count(), 1);
+    }
+
     void cleanupTestCase()
     {
+        QSignalSpy pow(m, SIGNAL(poweredChanged(bool)));
+        m->setPowered(true);
+        QTRY_COMPARE(pow.count(), 1);
+        QCOMPARE(pow.takeFirst().at(0).toBool(), true);
+        QCOMPARE(m->powered(), true);
     }
 
 private:
